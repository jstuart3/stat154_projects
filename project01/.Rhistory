plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
summary(log_data$voltage)
summary(net_data$voltage/100)
summary(log_data$voltage)
summary(net_data$voltage/100)
summary(log_data$voltage)
summary(net_data$voltage/100)
# converting voltage data to same range
summary(log_data$voltage)
summary(net_data$voltage/100)
plot1 <- graph_func(log_data$voltage, net_data$voltage, 'voltage', 30)
plot2 <- graph_func(log_data$depth, net_data$depth, 'depth', 30)
plot3 <- graph_func(log_data$humidity, net_data$humidity, 'humidity', 30) + xlim(0, 1000)
plot4 <- graph_func(log_data$humid_temp, net_data$humid_temp, 'temp', 30)
plot5 <- graph_func(log_data$humid_adj, net_data$humid_adj, 'adjusted humidity', 30) + xlim(0, 1000)
plot6 <- graph_func(log_data$hamatop, net_data$hamatop, 'hamatop', 30)
plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
plot1 <- graph_func(log_data$voltage, net_data$voltage/100, 'voltage', 30) + xlim(0, 100)
plot2 <- graph_func(log_data$depth, net_data$depth, 'depth', 30)
plot3 <- graph_func(log_data$humidity, net_data$humidity, 'humidity', 30) + xlim(0, 1000)
plot4 <- graph_func(log_data$humid_temp, net_data$humid_temp, 'temp', 30)
plot5 <- graph_func(log_data$humid_adj, net_data$humid_adj, 'adjusted humidity', 30) + xlim(0, 1000)
plot6 <- graph_func(log_data$hamatop, net_data$hamatop, 'hamatop', 30)
plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
plot1 <- graph_func(log_data$voltage, net_data$voltage, 'voltage', 30) + xlim(0, 100)
plot2 <- graph_func(log_data$depth, net_data$depth, 'depth', 30)
plot3 <- graph_func(log_data$humidity, net_data$humidity, 'humidity', 30) + xlim(0, 1000)
plot4 <- graph_func(log_data$humid_temp, net_data$humid_temp, 'temp', 30)
plot5 <- graph_func(log_data$humid_adj, net_data$humid_adj, 'adjusted humidity', 30) + xlim(0, 1000)
plot6 <- graph_func(log_data$hamatop, net_data$hamatop, 'hamatop', 30)
plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
plot1 <- graph_func(log_data$voltage, net_data$voltage, 'voltage', 30) )
plot1 <- graph_func(log_data$voltage, net_data$voltage, 'voltage', 30)
plot2 <- graph_func(log_data$depth, net_data$depth, 'depth', 30)
plot3 <- graph_func(log_data$humidity, net_data$humidity, 'humidity', 30) + xlim(0, 1000)
plot4 <- graph_func(log_data$humid_temp, net_data$humid_temp, 'temp', 30)
plot5 <- graph_func(log_data$humid_adj, net_data$humid_adj, 'adjusted humidity', 30) + xlim(0, 1000)
plot6 <- graph_func(log_data$hamatop, net_data$hamatop, 'hamatop', 30)
plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
summary(net_data$voltage/100)
summary(log_data$voltage)
summary(net_data$voltage/100)
# converting voltage data to same range
summary(log_data$voltage)
summary(net_data$voltage/100)
hist(log_data$voltage)
hist(net_data$voltage)
hist(net_data$voltage/100)
hist(net_data$voltage/100, breaks = 5)
hist(net_data$voltage/100, breaks = 3)
hist(net_data$voltage/100, breaks = 10)
hist(log_data$voltage, breaks = 10)
summary(net_data$voltage)
# converting voltage data to same range
summary(net_data$voltage)
net_data$voltage <- net_data$voltage/100
summary(net_data$voltage)
sum(is.na(log_data$voltage))
sum(is.na(log_data$humidity))
sum(is.na(log_data$humid_temp))
sum(is.na(log_data$humid_adj))
sum(is.na(log_data$result_time))
sum(is.na(log_data[,1]))
sum(is.na(log_data[,7]))
sum(is.na(log_data[,i]))
for (i in length(colnames(log_data))){
sum(is.na(log_data[,i]))
}
print(sum(is.na(log_data[,i])))
counts <- []
# replacing missing values
counts <- vector()
for (i in length(colnames(log_data))){
counts[i] <- (is.na(log_data[,i]))
}
counts
length(colnames(log_data)
)
# replacing missing values
counts <- vector()
for (i in range(length(colnames(log_data)))){
counts[i] <- (is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(length(colnames(log_data)))){
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(1:length(colnames(log_data)))){
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(1:11)){
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(1:11)){
counts[i] <- sum(is.na(net_data[,i]))
}
counts
sum(is.na(net3_data[,1]))
sum(is.na(net_data[,1]))
sum(is.na(net_data[,2]))
sum(is.na(net_data[,3]))
sum(is.na(net_data[,4]))
sum(is.na(net_data[,5]))
sum(is.na(net_data[,6]))
sum(is.na(net_data[,7]))
# replacing missing values
counts <- vector()
for (i in range(1:11)){
counts[i] <- sum(is.na(net_data[,i]))
}
counts
sum(is.na(net_data[,8]))
sum(is.na(net_data[,9]))
sum(is.na(net_data[,10]))
sum(is.na(net_data[,11]))
sum(is.na(net_data[,12]))
# replacing missing values
counts <- vector()
for (i in range(1:11)){
counts[i] <- sum(is.na(net_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(1:11)){
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in range(1:11)){
print('i')
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# replacing missing values
counts <- vector()
for (i in 1:11){
print('i')
counts[i] <- sum(is.na(log_data[,i]))
}
counts
# counting missing values
counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
counts
}
# counting missing values
counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
# counting missing values
na_counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
na_counts_func()
# counting missing values
na_counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
na_counts_func(log_data)
# counting missing values
na_counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
na_counts_func(log_data)
na_counts_func(net_data)
# counting missing values
na_counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
na_counts_func(log_data)
na_counts_func(net_data)
na_counts_func(all_data)
8270+4262
log_data[,7]
is.na(log_data[,7])
log_data[is.na(log_data[,7]), ]
tail(log_data[is.na(log_data[,7]), ])
tail(log_data[is.na(net_data[,7]), ])
log_data[is.na(log_data[,7]), ]
hist(log_data[is.na(log_data[,7]), ]$result_time)
hist(log_data[is.na(log_data[,7]), ])
hist(log_data[is.na(log_data[1,7]), ])
hist(log_data[is.na(log_data[,7]), ])
View(all_data)
View(log_data)
# reading in the data
all_data <- read.csv("data/sonoma-data-all.csv")
View(log_data)
log_data <- read.csv("data/sonoma-data-log.csv")
net_data <- read.csv("data/sonoma-data-net.csv")
location_data <- read.csv("data/mote-location-data.txt")
View(net_data)
log_data[is.na(log_data[,7]), ]
log_data[is.na(net_data[,7]), ]
net_data[is.na(net_data[,7]), ]
View(all_data)
net_data[is.na(net_data[,11]), ]
# viewing missing data
log_data[is.na(log_data[,11]), ]
net_data[is.na(net_data[,11]), ]
# viewing missing data
head(log_data[is.na(log_data[,11]), ])
tail(log_data[is.na(log_data[,11]), ])
head(net_data[is.na(net_data[,11]), ])
tail(net_data[is.na(net_data[,11]), ])
net_data[net_data$voltage >= 10]
net_data[net_data$voltage >= 10
net_data[net_data$voltage >= 10]
net_data$voltage >= 10
net_data[net_data$voltage >= 10]
net_data[net_data$voltage >= 10, ]
# converting voltage data to same range
summary(net_data$voltage)
net_data$voltage <- net_data$voltage/100
summary(net_data$voltage)
net_data[net_data$voltage >= 10, ]
net_data[net_data$voltage > 3, ]
net_data[net_data$voltage < 2.4, ]
net_data
net_data[net_data$voltage < 2.4 & net_data$voltage > 3, ]
net_data[net_data$voltage < 2.4 or net_data$voltage > 3, ]
net_data[net_data$voltage < 2.4 || net_data$voltage > 3, ]
net_data[net_data$voltage < 2.4 || net_data$voltage > 3 & is.na(net_data[,11]), ]
net_data[(net_data$voltage < 2.4 || net_data$voltage > 3) & is.na(net_data[,11]), ]
net_data[net_data$voltage > 3, ]
# p1 <- qplot(mpg, wt, data=mtcars)
# p2 <- p1
# p3 <- p1 + theme(axis.text.y=element_blank(), axis.title.y=element_blank())
#
# grid.arrange(arrangeGrob(p1,p2, ncol=1, nrow=2),
#          arrangeGrob(p3, ncol=1, nrow=1), heights=c(4,1))
# p1 <- qplot(mpg, wt, data=mtcars)
# p2 <- p1
# p3 <- p1 + theme(axis.text.y=element_blank(), axis.title.y=element_blank())
#
# grid.arrange(arrangeGrob(p1,p2, ncol=1, nrow=2),
#          arrangeGrob(p3, ncol=1, nrow=1), heights=c(4,1))
# mydata <- data.frame(myGroup = c('a', 'b'), myX = c(1,1))
#
# qplot(data = mydata,
#     x = myX,
#     facets = ~myGroup)
#
# ggplot(data = mydata) +
#     geom_bar(aes(myX)) +
#     facet_wrap(~myGroup)
location_data
location_data[0]
location_data[1]
location_data[1, 1]
location_data <- read.table("data/mote-location-data.txt")
location_data
location_data <- read.table("data/mote-location-data.txt", header = TRUE)
location_data
location_data[order(location_data$ID), ]
location_data <- location_data[order(location_data$ID), ]
location_data
location_data$ID[1]
location_data$ID[1] <- 1
location_data
rownames(location_data) <- seq(length=nrow(location_data))
location_data
log_data[log_data$nodeid == 3]
log_data[log_data$nodeid == 3, ]
log_data[log_data$nodeid == 0, ]
log_data[log_data$nodeid == 1, ]
log_data[log_data$nodeid == 2, ]
location_data <- read.table("data/mote-location-data.txt", header = TRUE)
# adding location data
location_data <- location_data[order(location_data$ID), ]
# # changing fir
# location_data$ID[1] <- 1
# renumbering rows
rownames(location_data) <- seq(length=nrow(location_data))
location_data
log_data[1, ]
log_data <- log_data[c("Height", "Direction")]
log_data[c("Height", "Direction")]
log_data$[c("Height", "Direction")]
log_data$Height
log_data
head(log_data)
log_data$Height <- 0
head(log_data)
head(location_data)
log_data$Direction <- 0
log_data$Distance <- 0
log_data$Tree <- 0
head(log_data)
log_data <- read.csv("data/sonoma-data-log.csv")
log_data[c("Height, Direction")] <- 0
log_data
head(log_data)
log_data["Height", "Dir"] <- 0
head(log_data)
log_data <- read.csv("data/sonoma-data-log.csv")
head(log_data)
location_data
log_data["Height", "Direction", "Distance", "Tree"] <- 0
net_data["Height", "Direction", "Distance", "Tree"] <- 0
log_data["Height", "Dir"] <- 0
head(log_data)
log_data["Height"] <- 0
head(log_data)
remove(list = ls())
# mounting libraries
library(ggplot2)
library(grid)
library(gridExtra)
# reading in the data
all_data <- read.csv("data/sonoma-data-all.csv")
log_data <- read.csv("data/sonoma-data-log.csv")
net_data <- read.csv("data/sonoma-data-net.csv")
# function to generate paired histograms
graph_func <- function(log_dat, net_dat, val, bins){
log <- data.frame(dummy_var = log_dat)
log$source <- 'log'
net <- data.frame(dummy_var = net_dat)
net$source <- 'net'
combination <-rbind(log, net)
ggplot(combination, aes(dummy_var, fill = source)) + geom_histogram(binwidth = bins) + labs(title = val, x = val)
}
plot1 <- graph_func(log_data$voltage, net_data$voltage, 'voltage', 30)
plot2 <- graph_func(log_data$depth, net_data$depth, 'depth', 30)
plot3 <- graph_func(log_data$humidity, net_data$humidity, 'humidity', 30) + xlim(0, 1000)
plot4 <- graph_func(log_data$humid_temp, net_data$humid_temp, 'temp', 30)
plot5 <- graph_func(log_data$humid_adj, net_data$humid_adj, 'adjusted humidity', 30) + xlim(0, 1000)
plot6 <- graph_func(log_data$hamatop, net_data$hamatop, 'hamatop', 30)
plot7 <- graph_func(log_data$hamabot, net_data$hamabot, 'hamabot', 30)
grid.arrange(arrangeGrob(plot1, plot2, plot3, plot4, ncol=2), arrangeGrob(plot5, ncol = 2), heights=c(4, 2))
#grid.arrange(arrangeGrob(plot5, plot6, plot7, ncol = 2))
# converting voltage data to same range
summary(net_data$voltage)
net_data$voltage <- net_data$voltage/100
summary(net_data$voltage)
# counting missing values
na_counts_func <- function(df) {
counts <- vector()
for (i in 1:11){
counts[i] <- sum(is.na(df[,i]))
}
return(counts)
}
na_counts_func(log_data)
na_counts_func(net_data)
na_counts_func(all_data)
# viewing missing data
head(log_data[is.na(log_data[,11]), ])
tail(log_data[is.na(log_data[,11]), ])
head(net_data[is.na(net_data[,11]), ])
tail(net_data[is.na(net_data[,11]), ])
# i need a better way to visualize the date ranges
# may need to look at sonoma-dates.m.gz to explain date problem in log_data
# removing missing values
net_data[net_data$voltage > 3, ]
net_data[(net_data$voltage < 2.4 || net_data$voltage > 3) & is.na(net_data[,11]), ]
# look into other outlier removal methods. at lease validate that filtering by voltage is a valid approach.
location_data <- read.table("data/mote-location-data.txt", header = TRUE)
# adding location data
location_data <- location_data[order(location_data$ID), ]
# # changing fir
# location_data$ID[1] <- 1
# renumbering rows
rownames(location_data) <- seq(length=nrow(location_data))
log_data["Height"] <- 0
log_data["Direction"] <- 0
log_data["Disrance"] <- 0
log_data["Tree"] <- 0
net_data["Height"] <- 0
net_data["Direction"] <- 0
net_data["Distance"] <- 0
net_data["Tree"] <- 0
# p1 <- qplot(mpg, wt, data=mtcars)
# p2 <- p1
# p3 <- p1 + theme(axis.text.y=element_blank(), axis.title.y=element_blank())
#
# grid.arrange(arrangeGrob(p1,p2, ncol=1, nrow=2),
#          arrangeGrob(p3, ncol=1, nrow=1), heights=c(4,1))
# mydata <- data.frame(myGroup = c('a', 'b'), myX = c(1,1))
#
# qplot(data = mydata,
#     x = myX,
#     facets = ~myGroup)
#
# ggplot(data = mydata) +
#     geom_bar(aes(myX)) +
#     facet_wrap(~myGroup)
head(log_data)
lst <- [c("Height", "Direction", "Distance", "Tree")]
lst <- c("Height", "Direction", "Distance", "Tree")
lst
log_data <- read.csv("data/sonoma-data-log.csv")
head(log_data)
log_data[i] <- 0
for (i in lst) {
log_data[i] <- 0
}
head(log_data)
colnames(location_data)
colnames(location_data)[2:]
colnames(location_data)[2,]
colnames(location_data)[2]
colnames(location_data)[2,]
colnames(location_data)[2:,]
colnames(location_data)[2:]
colnames(location_data)[2:3]
colnames(location_data)[2:length(colnames(location_data))]
log_data <- read.csv("data/sonoma-data-log.csv")
for (i in colnames(location_data)[2:length(colnames(location_data))]) {
log_data[i] <- 0
}
head(log_data)
for (i in colnames(location_data)[2:length(colnames(location_data))]) {
all_data[i] <- 0
}
head(all_data)
all_data$Height[2]
location_data
for (i in 1:length(all_data)) {
all_data$Height[i] <- location_data$Height[all_data$nodeid[i]]
}
head(all_data)
location_data
for (i in 1:length(all_data)) {
all_data$Height[i] <- location_data$Height[location_data$ID == all_data$nodeid]
}
all_data$Height[2]
all_data$Height[2]
head(all_data)
location_data$Height[2]
location_data["ID"]
location_data["ID" == 5]
location_data["ID" == 2]
location_data["ID"]
location_data["ID"][1]
location_data
typeof(location_data)
location_data[location_data$ID == 5]
location_data[location_data$ID == 2]
location_data[location_data$ID == 6]
typeof(log_data)
location_data$ID
location_data$ID == 2
location_data[location_data$ID == 2, ]
location_data[location_data$ID == 2, "Height"]
for (i in 1:length(all_data)) {
all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"]
}
location_data[location_data$ID == 2, "Height"]
for (i in 1:length(all_data)) {
all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"]
}
length(all_data)
nrow(all_data)
for (i in 1:nrow(all_data)) {
all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"]
}
for (i in 1:nrow(all_data)) {
all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"]
}
for (i in 1:nrow(all_data)) {
try(all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"])
}
for (i in 1:nrow(all_data)) {
try(all_data$Height[i] <- location_data[location_data$ID == all_data$nodeid[i], "Height"])
}
